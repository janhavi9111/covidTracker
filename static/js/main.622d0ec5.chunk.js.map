{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.622d0ec5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card , CardContent , Typography } from \"@material-ui/core\"\r\n\r\nfunction InfoBox( {title, cases, total,active,isRed, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick} \r\n        className={`infoBox ${active &&  \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                {title}\r\n                </Typography>\r\n\r\n                {/* No. of cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                \r\n                {/* Total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      casesType={casesType}\r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {showDataOnMap(countries, casesType)}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        \r\n            {countries.map(({country , cases})=>{\r\n              return  <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            })};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data ) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = 'cases' }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, 'cases');\r\n          setData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n        options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React , {useEffect, useState} from 'react';\nimport {MenuItem,FormControl,Select , Card , CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from \"./Map\";\nimport './App.css';\nimport Table from './Table';\nimport './Table.css';\nimport {sortData , prettyPrintStat} from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport './InfoBox.css'\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData , setTableData] = useState([]);\n  const [mapCenter , setMapCenter] = useState( {lat: 34.80746, lng: -40.4796});\n  const [mapZoom , setMapZoom] = useState(3);\n  const [mapCountries , setMapCountries] = useState([]);\n  const [casesType , setCasesType] = useState(\"cases\")\n\n  \n  useEffect(()=>{\n    fetch('https://disease.sh/v3/covid-19/all').then(response=> response.json()).then(data => setCountryInfo(data));\n  },[])\n\n  useEffect(()=>{\n     const getCountriesData = async () =>{\n       await fetch (\"https://disease.sh/v3/covid-19/countries\").then((response)=> response.json()).then((data)=> {\n         const countries = data.map((country) => (\n           {\n             name: country.country , // name of country like us uk india\n             value: country.countryInfo.iso2 \n           }));\n\n           const sortedData = sortData(data)\n           setTableData(sortedData);\n          setMapCountries(data);\n           setCountries(countries);\n       });\n     };\n     getCountriesData();\n  },[]);\n  \n  const onCountryChange = async (event) =>{\n    const countryCode = event.target.value;\n    \n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n        setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1> COVID-19 TRACKER </h1>\n        <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>           \n           {\n              countries.map((country) => {\n               return  <MenuItem value={country.value}>{country.name}</MenuItem>\n              })\n            }\n          </Select>\n        </FormControl>\n      </div>\n      \n      <div className=\"app__stats\">\n        <InfoBox \n        isRed\n        active={casesType === 'cases'}\n        onClick = {e => setCasesType('cases')}\n        title=\"Coronavirus cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}></InfoBox>\n        <InfoBox \n        active={casesType === 'recovered'}\n        onClick = {e => setCasesType('recovered')}\n        title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}></InfoBox>\n        <InfoBox\n        isRed \n        active={casesType === 'deaths'}\n        onClick = {e => setCasesType('deaths')}\n        title=\"Deaths\"  cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}></InfoBox>\n      </div>\n      <div className=\"This_is_map\">\n      {/* Map */}\n      <Map \n      casesType={casesType}\n      countries={mapCountries}\n      center = {mapCenter}\n      zoom = {mapZoom}\n      />\n      </div>\n      </div>\n      <Card className=\"app__right\">\n      <CardContent>\n        <h3>Live cases by Country </h3>\n        <Table countries={tableData}/>\n      <h3>Worldwide new {casesType}</h3>\n     {/* Graph */}\n     <LineGraph casesType={casesType} />\n\n      </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}